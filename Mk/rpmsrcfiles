#!/bin/sh
# -*- tab-width: 4 -*- ;; Emacs
# vi: set noexpandtab  :: Vi/ViM
############################################################ IDENT(1)
#
# $Title: Script for filling %files in SPECFILE with list of src contents $
# $Copyright: 1999-2019 Devin Teske. All rights reserved. $
# $FrauBSD: viotop/Mk/rpmsrcfiles 2020-04-17 15:35:48 -0700 freebsdfrau $
#
############################################################ INFORMATION
#
# Usage: rpmsrcfiles
#
############################################################ GLOBALS

pgm="${0##*/}" # Program basename

#
# Global exit status
#
SUCCESS=0
FAILURE=1

#
# Utility pathnames
#
: ${FIND:=find}
: ${SORT:=sort}
: ${MV:=mv}
: ${AWK:=awk}
: ${RM:=rm}

############################################################ FUNCTIONS

die()
{
	local fmt="$1"
	if [ "$fmt" ]; then
		shift 1 # fmt
		printf "$pgm: $fmt\n" "$*"
	fi
	exit $FAILURE
}

############################################################ MAIN

#
# Check environment variables
#
[ "$SPECFILE" ] || die "SPECFILE unset or NULL (exiting)"
[ -e "$SPECFILE" ] || die "%s: No such file or directory" "$SPECFILE"
[ -d "$SPECFILE" ] && die "%s: Is a directory" "$SPECFILE"

#
# Source pkgcenter.conf to get additional required settings
#
. "$PKGCENTER_CONF" || die "Unable to source \`%s'" "$PKGCENTER_CONF"
[ "$SRCDIR" ] || die "%s: SRCDIR: Undefined value" "$PKGCENTER_CONF"
[ -e "$SRCDIR" ] || die "%s: No such file or directory" "$SRCDIR"
[ -d "$SRCDIR" ] || die "%s: Not a directory" "$SRCDIR"

#
# Generate the new contents from the old
#
[ -e "$SPECFILE.orig" ] && die "%s.orig exists (exiting)" "$SPECFILE"
$MV -n "$SPECFILE" "$SPECFILE.orig" ||
	die "Unable to move \`%s' to \`.orig'" "$SPECFILE"
( cd "$SRCDIR" && $FIND . -not -type d ) | $SORT |
	$AWK -v srcdir="$SRCDIR" -v specfile="$SPECFILE.orig" '
		BEGIN {
			while (getline) files = files "\n" substr($0, 2)
		}
		END {
			while (getline < specfile) {
				buf = buf "\n" $0
				if (/^%files$/) {
					while (getline < specfile && /^%/) {
						buf = buf "\n" $0
					}
					while ($0 ~ "^/") getline < specfile
					buf = buf files "\n"
					if (!/^[[:space:]]*$/)
						buf = buf $0
				}
			}
			close(specfile)
			print substr(buf,2)
		}
	' > "$SPECFILE" || die

#
# Clean up
#
$RM -f "$SPECFILE.orig"

exit $SUCCESS

################################################################################
# END
################################################################################
