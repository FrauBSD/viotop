#!/bin/sh
# vi: set ft=sh noet ts=8 sw=8 :: Vi/ViM
############################################################ IDENT(1)
#
# $Title: Script to generate top-like statistics for VFS I/O under Linux $
# $Copyright: 2020 Devin Teske. All rights reserved. $
# $FrauBSD: viotop/viotop 2020-04-21 19:30:05 -0700 freebsdfrau $
#
############################################################ DEFAULTS

DEFAULT_INTERVAL=2.0 # seconds

############################################################ GLOBALS

VERSION='$Version: 3.7 $'

pgm="${0##*/}" # Program basename

#
# Global exit status
#
SUCCESS=0
FAILURE=1

#
# Command-line options
#
DEBUG=					# -d
DEBUGGER=				# -D
FILTER_GROUP=				# -G group
FILTER_TYPE=				# -T type
FILTER_USER=				# -U user
FILTER_PID=				# -P pid
INTERVAL=$DEFAULT_INTERVAL		# -i sec
NO_NAMES=				# -n
NSAMPLES=				# -N num
OUTPUT_JSON=				# -j
RAW_VIEW=				# -r
SHOW_AGGREGATES=			# -a
VIEW_AGGREGATES=			# -A
VIEW_COMM=				# -c
VIEW_GROUP=				# -g
VIEW_PID=				# -p (default)
VIEW_TYPE=				# -t
VIEW_USER=				# -u
WIDE_VIEW=				# -w

#
# Miscellaneous
#
FILTER_COMM=
FILTER_GID=
FILTER_UID=
INTERVAL_PROBE= # Calculated
INTERVAL_SECONDS= # Raw value for awk
MAP_ID_TRACE=
OPEN_CONDITION=
OPEN_FDS=
VIEW=

############################################################ FUNCTIONS

die()
{
	local fmt="$1"
	if [ "$fmt" ]; then
		shift 1 # fmt
		printf "%s: $fmt\n" "$pgm" "$@" >&2
	fi
	exit $FAILURE
}

info()
{
	printf "info|%s\n" "$*"
}

usage()
{
	local fmt="$1"
	local optfmt="\t%-11s %s\n"

	exec >&2
	if [ "$fmt" ]; then
		shift 1 # fmt
		printf "%s: $fmt\n" "$pgm" "$@"
	fi

	printf "Usage: %s [OPTIONS] [--] [comm]\n" "$pgm"
	printf "Options:\n"
	printf "$optfmt" "-a" "Show aggregate subtotals."
	printf "$optfmt" "-A" "Only show aggregate subtotals."
	printf "$optfmt" "-c" "View read/write activity by command name."
	printf "$optfmt" "-d" "Debug. Print bpftrace script and exit."
	printf "$optfmt" "-D" "Enable debugger."
	printf "$optfmt" "-G group" "Group filter (name or id)."
	printf "$optfmt" "-g" "View read/write activity by group."
	printf "$optfmt" "-h" "Print usage statement and exit."
	printf "$optfmt" "-i sec" \
		"Set interval seconds. Default \`$DEFAULT_INTERVAL'."
	printf "$optfmt" "-J" "Output most JSON data. Same as \`-ajgtu'."
	printf "$optfmt" "-j" "Output JSON formatted data."
	printf "$optfmt" "-N num" "Perform num samples and exit."
	printf "$optfmt" "-n" "Do not attempt to map uid/gid to names."
	printf "$optfmt" "-P pid" "Process ID filter."
	printf "$optfmt" "-p" "View read/write activity by PID (default)."
	printf "$optfmt" "-r" "Raw view. Do not format output of bpftrace."
	printf "$optfmt" "-T type" "Filter on filesystem type."
	printf "$optfmt" "-t" "View read/write activity by VFS type."
	printf "$optfmt" "-U user" "User filter (name or id)."
	printf "$optfmt" "-u" "View read/write activity by user."
	printf "$optfmt" "-v" "Print version and exit."
	printf "$optfmt" "-w" "Wide view. Maximize width of first column."

	die
}

run_lsof()
{
	[ "$DEBUG" ] && return

	case "$FILTER_TYPE" in
	""|nfs*) lsof -X -N +c 0 ;;
	esac

	case "$FILTER_TYPE" in
	nfs*) : skip ;;
	*) lsof -X +c 0 +e /
	esac
}

run_bpftrace()
{
	if [ "$DEBUG" ]; then
		cat
		return
	fi

	exec bpftrace -B none /dev/stdin "$@"
}

count()
{
	local OPTIND=1 OPTARG __flag
	local __delim="$IFS"
	local __var_to_set=

	while getopts d:s: __flag; do
		case "$__flag" in
		d) __delim="$OPTARG" ;;
		s) __var_to_set="$OPTARG" ;;
		esac
	done
	shift $(( $OPTIND - 1 ))

	local IFS="$__delim"
	set -- $*
	if [ "$__var_to_set" ]; then
		eval $__var_to_set=$#
	else
		echo $#
	fi
}

getword()
{
	local funcname=getword
	local OPTIND=1 OPTARG __flag
	local __delim="$IFS"
	local __var_to_set=
	local __word=

	while getopts d:s:w: __flag; do
		case "$__flag" in
		d) __delim="$OPTARG" ;;
		s) __var_to_set="$OPTARG" ;;
		w) __word="$OPTARG" ;;
		esac
	done
	shift $(( $OPTIND - 1 ))

	case "$__word" in
	""|*[!0-9]*) die "$funcname: \`-w' requires a number" ;;
	esac

	local IFS="$__delim"
	set -- $*
	if [ "$__var_to_set" ]; then
		eval $__var_to_set=\"\$\{$__word\}\"
	else
		eval echo \"\$\{$__word\}\"
	fi
}

bpf_prog_id()
{
	local __pid="$1" __prog="$2" __var_to_set="$3"
	local __ls __out __res

	[ "$__pid" -a "$__prog" ] || return ${FAILURE:-1}

	__ls=$( ls -l /proc/$__pid/fd 2> /dev/null ) || return
	__out=$( echo "$__ls" | awk -v pid=$__pid -v prog="$__prog" '
		$NF == "anon_inode:bpf-prog" {
			fd = $(NF-2)
			fdinfo = sprintf("/proc/%d/fdinfo/%d", pid, fd)
			id = ""
			while (getline < fdinfo > 0) {
				if ($1 != "prog_id:") continue
				id = $2
				break
			}
			close(fdinfo)
			if (id == "") next
			cmd = sprintf("bpftool prog show id %d", id)
			if (cmd | getline <= 0 || $4 != prog) {
				close(cmd)
				next
			}
			print id
			exit found = 1
		}
		END { exit found ? 0 : 3 }
	' )
	__res=$?

	if [ "$__var_to_set" ]; then
		eval $__var_to_set=\"\$__out\"
	else
		echo "$__out"
	fi

	return $__res
}

bpf_map_ids()
{
	local __prog="$1" __var_to_set="$2"
	local __out __res

	[ "$__prog" ] || return ${FAILURE:-1}

	__out=$( bpftool prog show id $__prog ) || return
	__out=$( echo "$__out" | awk '
		$(NF-1) == "map_ids" {
			print $NF
			found = 1
			exit
		}
		END { exit found ? 0 : 3 }
	' )
	__res=$?

	if [ "$__var_to_set" ]; then
		eval $__var_to_set=\"\$__out\"
	else
		echo "$__out"
	fi

	return $__res
}

############################################################ MAIN

#
# Process command-line options
#
while getopts AacDdG:ghi:JjN:nP:prsT:tU:uvw flag; do
	case "$flag" in
	A) VIEW_AGGREGATES=1 SHOW_AGGREGATES=1 ;;
	a) SHOW_AGGREGATES=1 ;;
	c) VIEW=COMM VIEW_COMM=1 ;;
	D) DEBUGGER=1 RAW_VIEW=1 ;;
	d) DEBUG=1 RAW_VIEW=1 ;;
	G) FILTER_GROUP="$OPTARG" ;;
	g) VIEW=GROUP VIEW_GROUP=1 ;;
	i) INTERVAL="$OPTARG" ;;
	J) VIEW=JSON OUTPUT_JSON=1 SHOW_AGGREGATES=1 \
		VIEW_GROUP=1 VIEW_TYPE=1 VIEW_USER=1 ;;
	j) OUTPUT_JSON=1 ;;
	N) [ "$OPTARG" ] || usage "-N option requires an argument" # NOTREACHED
		NSAMPLES="$OPTARG" ;;
	n) NO_NAMES=1 ;;
	P) FILTER_PID="$OPTARG" ;;
	p) VIEW=PID VIEW_PID=1 ;;
	r) RAW_VIEW=1 ;;
	T) FILTER_TYPE="$OPTARG" ;;
	t) VIEW=TYPE VIEW_TYPE=1 ;;
	U) FILTER_USER="$OPTARG" ;;
	u) VIEW=USER VIEW_USER=1 ;;
	v) VERSION="${VERSION#*: }"
		echo "${VERSION% $}"
		exit $SUCCESS ;;
	w) WIDE_VIEW=1 ;;
	*) usage # NOTREACHED
	esac
done
shift $(( $OPTIND - 1 ))

#
# Process command-line arguments
#
[ $# -le 1 ] || usage "Too many arguments" # NOTREACHED
FILTER_COMM="$1"

#
# Silently ignore previous view options unless JSON output
#
[ "$VIEW" ] || VIEW=PID VIEW_PID=1
if [ ! "$OUTPUT_JSON" ]; then
	case "$VIEW" in # VIEWS
	COMM) VIEW_GROUP= VIEW_PID= VIEW_TYPE= VIEW_USER= ;;
	GROUP) VIEW_COMM= VIEW_PID= VIEW_TYPE= VIEW_USER= ;;
	PID) VIEW_COMM= VIEW_GROUP= VIEW_TYPE= VIEW_USER= ;;
	TYPE) VIEW_COMM= VIEW_GROUP= VIEW_PID= VIEW_USER= ;;
	USER) VIEW_COMM= VIEW_GROUP= VIEW_PID= VIEW_TYPE= ;;
	esac
fi

#
# Validate `-i sec' option
#
case "$INTERVAL" in
"") usage "missing -i argument" ;; # NOTREACHED
0) die "-i sec must be non-zero" ;;
*[!0-9.]*|*.*.*|.) die "-i sec must be a number" ;;
*.*)
	INTERVAL_SECONDS=$INTERVAL
	ms=$( echo "$INTERVAL * 1000" | bc )
	ms="${ms%%.*}"

	#
	# If, after multiplying by 1000 to convert sec to msec,
	# the leading [non-decimal] digit is either missing or zero,
	# the input was too small to produce timing of at least 1 msec
	#
	case "$ms" in
	""|0) die "-i sec must be at least 0.001" ;;
	esac

	INTERVAL_PROBE=interval:ms:$ms
	;;
*)
	INTERVAL_SECONDS=$INTERVAL
	INTERVAL_PROBE=interval:s:$INTERVAL_SECONDS
esac

#
# Validate `-N num' option
#
case "$NSAMPLES" in
0) die "-N num must be non-zero" ;;
*[!0-9]*) die "-N num must be a positive integer" ;;
esac

#
# Process `-G group'/`-U user' option
#
case "$FILTER_GROUP" in
"") : leave-empty ;;
*[!0-9]*) # Translate from name to GID
	FILTER_GID=$( getent group "$FILTER_GROUP" ) ||
		die "Unknown group \`%s'" "$FILTER_GROUP"
	FILTER_GID=$( echo "$FILTER_GID" | awk -F: '{print $3}' )
	;;
*) # Translate from GID to name
	FILTER_GID=$FILTER_GROUP
	FILTER_GROUP=$( getent group $FILTER_GID ) ||
		die "Unknown group id %d" "$FILTER_GID"
	FILTER_GROUP=$( echo "$FILTER_GROUP" | awk -F: '{print $1}' )
esac
case "$FILTER_USER" in
"") : leave-empty ;;
*[!0-9]*) # Translate from name to UID
	FILTER_UID=$( getent passwd "$FILTER_USER" ) ||
		die "Unknown user \`%s'" "$FILTER_USER"
	FILTER_UID=$( echo "$FILTER_UID" | awk -F: '{print $3}' )
	;;
*) # Translate from UID to name
	FILTER_UID=$FILTER_USER
	FILTER_USER=$( getent passwd $FILTER_UID ) ||
		die "Unknown user id %d" "$FILTER_UID"
	FILTER_USER=$( echo "$FILTER_USER" | awk -F: '{print $1}' )
esac

#
# Validate `-P pid' option
#
case "$FILTER_PID" in
"") : leave-empty ;;
0) die "-P pid must be non-zero" ;;
*[!0-9]*) die "-P pid must be a positive integer" ;;
esac

#
# Get terminal size
#
size=$( stty size 2> /dev/null )
if [ "$size" ]; then
	cols="${size#*[$IFS]}"
	rows="${size%%[$IFS]*}"
	case "$rows$cols" in
	*[!0-9]*)
		cols=80
		rows=24
		;;
	esac
fi

#
# Run script
#
{
	exec 3<&1

	#
	# Enable job control so we can bring bpftrace back to foreground
	# NB: Otherwise Ctrl-C does not function as expected
	#
	set -m

	#
	# Find open *file* descriptors
	#
	if [ ! "$IGNORE_RUNNING$DEBUG" ]; then
		info "Gathering open file-descriptor info" \
		     "(this may take a while)..."
		OPEN_FDS=$( run_lsof | awk \
			-v debug=${DEBUG:-0} \
			-v filter_comm="$FILTER_COMM" \
			-v filter_gid="$FILTER_GID" \
			-v filter_type="$FILTER_TYPE" \
			-v filter_user="$FILTER_USER" \
			-v stderr=/dev/stderr \
		'####################################### BEGIN

		BEGIN {
			delete mounts
			delete mount_type
			file = "/proc/mounts"
			nmounts = 0
			root_mount = ""
			root_mount_type = ""
			flen = length(filter_type)
			while (getline < file > 0) {
				if (filter_type != "" &&
				    substr($3, 1, flen) != filter_type)
					continue
				if ($2 == "/") {
					root_mount = $2
					root_mount_type = $3
				} else {
					mounts[++nmounts] = $2
					sub("/+$", "", mounts[nmounts])
					mount_type[nmounts] = $3
				}
			}
			close(file)
			if (root_mount != "") {
				mounts[++nmounts] = root_mount
				mount_type[nmounts] = root_mount_type
			}

			delete seen
		}

		######################################## FUNCTIONS

		function key(a, b) { return a "," b }

		function emit(str)
		{
			if (debug) return
			printf "%s\n", str
			fflush()
		}

		function info(str)
		{
			emit(sprintf("info|%s", str))
		}

		function getcol(name,        start, width, val)
		{
			start = startcol[name]
			width = colwidth[name]
			if (start < 1) return ""
			if (name == lastcol)
				val = substr($0, start)
			else
				val = substr($0, start, width)
			gsub(/(^[[:space:]]+|[[:space:]]+$)/, "", val)
			return val
		}

		######################################## MAIN

		# Header
		$1 == "COMMAND" && $2 == "PID" && $NF == "NAME" {
			delete cols
			delete startcol
			delete colwidth
			ncol = split($0, cols, /[[:space:]]+/)
			for (n = 1; n <= ncol; n++) {
				col = cols[n]
				if (n == 1) { # First col
					# NB: Left-justified
					match($0, /^[^ ]+ +/)
					startcol[col] = RSTART
					colwidth[col] = RLENGTH - 3
				} else if (n == 2) { # Second col
					# NB: Right-justified
					match($0, " " col " ")
					startcol[col] = RSTART - 2
					colwidth[col] = RLENGTH + 1
				} else if (n == ncols) { # Last col
					# NB: Left-justified
					match($0, / [^ ]+$/)
					startcol[col] = RSTART + 1
				} else {
					# NB: Right-justified
					pcol = cols[n - 1]
					startcol[col] = startcol[pcol]
					startcol[col] += colwidth[pcol] + 1
					match($0, " " col " ")
					colwidth[col] = RSTART + RLENGTH - 1
					colwidth[col] -= startcol[col]
					# NB: FD column has 1B tag
					if (col == "FD") colwidth[col]++
				}
			}
			lastcol = col
			next
		}

		# Parse fields
		{
			cmd  = getcol("COMMAND")
			pid  = getcol("PID")
			tid  = getcol("TID")
			user = getcol("USER")
			fd   = getcol("FD")
			type = getcol("TYPE")
			dev  = getcol("DEVICE")
			size = getcol("SIZE/OFF")
			node = getcol("NODE")
			name = getcol("NAME")

			# Treat effects of "lsof +e /"
			sub(/^UNKN/, "", type)
			sub(" \\(\\+e /\\)$", "", name)

			if (fd !~ /^[0-9]/) next
		}

		name ~ "^/" && type != "DIR" && fd ~ /^[0-9]+[rwu-]?$/ {

			sub(/[rwu-]$/, "", fd)
			if (key(pid, fd) in seen) next

			matched = 0
			for (n = 1; n <= nmounts; n++) {
				mnt = mounts[n]
				mnt_type = mount_type[n]
				len = length(mnt)
				pre = substr(name, 1, len + 1)
				if (mnt == "/" && name ~ "^/")
					matched = 1
				else if (name == mnt || pre == mnt "/")
					matched = 1
				if (matched) break
			}
			if (!matched) next

			#
			# FILTERS
			#

			# comm filter
			if (filter_comm != "" && cmd != filter_comm) {
				next
			}

			# user filter
			if (filter_user != "" && user != filter_user) {
				next
			}

			# group filter
			if (filter_gid != "") {
				gid = ""
				file = sprintf("/proc/%d/status", pid)
				while (getline L < file > 0) {
					if (L !~ /^Gid:/) continue
					sub(/^Gid:[[:space:]]*/, "", L)
					sub(/[^0-9].*/, "", L)
					gid = L
					break
				}
				close(file)
				if (gid != filter_gid) next
			}

			#
			# Save information for later bpftool
			#
			printf "%d:%d:%s\n", pid, fd, mnt_type > stderr

			#
			# Prevent duplicate reporting
			# NB: In the case of multiple threads, for example
			#
			seen[key(pid, fd)]
		}
		' 2>&1 >&3 ) || die "%s" "$OPEN_FDS"
	fi

	#
	# Generate conditions
	# FILTERS
	#
	condition=
	if [ "$FILTER_COMM" ]; then
		FILTER_COMM="\"$FILTER_COMM\""
		condition="$condition && comm == $FILTER_COMM"
	fi
	if [ "$FILTER_GID" ]; then
		condition="$condition && gid == $FILTER_GID"
	fi
	if [ "$FILTER_PID" ]; then
		condition="$condition && pid == $FILTER_PID"
	fi
	if [ "$FILTER_UID" ]; then
		condition="$condition && uid == $FILTER_UID"
	fi
	condition="${condition# && }"
	OPEN_CONDITION="$condition"

	#
	# Start background bpftrace
	# NB: M-x package-install [RET] dtrace-script-mode [RET]
	#
	run_bpftrace <<EOF &
	${DEBUG:+#!/usr/bin/bpftrace}
	/* -*- mode: dtrace-script; tab-width: 4 -*- ;; Emacs
	 * vi: set ft=dtrace noet ts=4 sw=4 :: Vi/ViM
	 */
	////////////////////////////////////////////////// INCLUDES

	#include <linux/fs.h>
	#include <linux/mount.h>

	////////////////////////////////////////////////// BEGIN

	BEGIN
	{
		@trace[-1,-1] = ""; // Required to create map
		delete(@trace[-1,-1]); // Delete dummy entry

		printf("===\n"); // Clear screen and draw header
		printf("info|Sampling data for ${INTERVAL}s (\`-i sec')...\n");
	}

	////////////////////////////////////////////////// OPEN PROBES

	/*
	 * open(2)/openat(2) [enter] probes
	 */

$( for func in sys_enter_open sys_enter_openat; do
	name=${func#*enter_}
	cat <<PROBE
	tracepoint:syscalls:$func
	${OPEN_CONDITION:+/$OPEN_CONDITION/
	}{
		// Free vfs_open flags
		if (str(args->filename) != "") {
			delete(@vfs_${name}_trace[tid]);
			@vfs_$name[tid] = 1;
		}
	}

PROBE
done )

	/*
	 * NB: vfs_open() always called after open(2)/openat(2)
	 */

	kprobe:vfs_open
	{
		//
		// Extract the filesystem type from mount superblock
		//
		\$path = (struct path *)arg0;
		\$mnt = (struct vfsmount *)\$path->mnt;
		\$mnt_sb = (struct super_block *)\$mnt->mnt_sb;
		\$type = (struct file_system_type *)\$mnt_sb->s_type;
		\$fstype = \$type->name;

$( for func in sys_enter_open sys_enter_openat; do
		name=${func#*enter_}
		exit_func=${func%%enter_*}exit_$name
		cat <<PROBE
		if (@vfs_$name[tid]) {
			delete(@vfs_$name[tid]); // Flag from $func

			//
			// Test filesystem type (for $exit_func)
			//
$( if [ "$FILTER_TYPE" ]; then
			awk 'sub(/^\\/,"")||1' <<-FILTER_TYPE
\			if (str(\$fstype, ${#FILTER_TYPE}) == "$FILTER_TYPE") {
\				@vfs_${name}_trace[tid] = str(\$fstype);
\			}
			FILTER_TYPE
else
			awk 'sub(/^\\/,"")||1' <<-FILTER_TYPE
\			@vfs_${name}_trace[tid] = str(\$fstype);
			FILTER_TYPE
fi )
		}
PROBE
done )
	}

	/*
	 * open(2)/openat(2) [exit] probes
	 */

$( for func in sys_exit_open sys_exit_openat; do
	name=${func#*exit_}
	cat <<PROBE
	tracepoint:syscalls:$func
	/@vfs_${name}_trace[tid] != ""/
	{
		\$fstype = @vfs_${name}_trace[tid];

		delete(@vfs_${name}_trace[tid]); // Flag from vfs_open

		\$ret = args->ret;
		if (\$ret >= 0)
		{
			\$fd = (uint64)\$ret;

			// Set flag to trace read/write on fd
			@trace[pid, \$fd] = \$fstype;
		}
	}

PROBE
done )

	////////////////////////////////////////////////// DUP PROBES

	/*
	 * dup(2) probes
	 */

	tracepoint:syscalls:sys_enter_dup
	/@trace[pid, args->fildes] != ""/
	{
		\$fd = (int64)args->fildes;

		@dup_fd[tid] = \$fd; // Pass to sys_exit_dup
	}

	tracepoint:syscalls:sys_exit_dup
	/@dup_fd[tid]/
	{
		\$oldfd = (int64)@dup_fd[tid];
		\$newfd = (int64)args->ret;

		delete(@dup_fd[tid]); // Arg from sys_enter_dup

		if (\$oldfd != \$newfd)
		{
			// Set flag to trace read/write on fd
			@trace[pid, \$newfd] = @trace[pid, \$oldfd];
		}
	}

	/*
	 * dup2(2) probe
	 */

	tracepoint:syscalls:sys_enter_dup2
	/args->oldfd != args->newfd/
	{
		\$oldfd = (int64)args->oldfd;
		\$newfd = (int64)args->newfd;

		delete(@trace[pid, \$newfd]);

		if (@trace[pid, \$oldfd] != "") {
			// Set flag to trace read/write on fd
			@trace[pid, \$newfd] = @trace[pid, \$oldfd];
		}
	}

	/*
	 * dup3(2) probe
	 */

	tracepoint:syscalls:sys_enter_dup3
	/args->oldfd != args->newfd/
	{
		\$oldfd = (int64)args->oldfd;
		\$newfd = (int64)args->newfd;

		delete(@trace[pid, \$newfd]);

		// Set flag to trace read/write on fd
		if (@trace[pid, \$oldfd] != "") {
			@trace[pid, \$newfd] = @trace[pid, \$oldfd];
		}
	}

	/*
	 * fcntl(2) probe
	 */

	tracepoint:syscalls:sys_enter_fcntl
	/args->cmd == F_DUPFD && args->fd != args->arg/
	{
		\$oldfd = (int64)args->fd;
		\$newfd = (int64)args->arg;

		delete(@trace[pid, \$newfd]);

		// Set flag to trace read/write on fd
		if (@trace[pid, \$oldfd] != "") {
			@trace[pid, \$newfd] = @trace[pid, \$oldfd];
		}
	}

	////////////////////////////////////////////////// CLOSE PROBES

	/*
	 * close(2) probe
	 */

	tracepoint:syscalls:sys_enter_close
	/@trace[pid, args->fd] != ""/
	{
		\$fd = args->fd;
		\$fstype = @trace[pid, \$fd];

		delete(@trace[pid, \$fd]); // Stop tracing read/write on fd
	}

	////////////////////////////////////////////////// READ PROBES

	/*
	 * read(2) probes
	 */

	tracepoint:syscalls:sys_enter_read
	/@trace[pid, args->fd] != ""/
	{
		\$fd = args->fd;
		\$count = args->count;

		// Pass args to sys_exit_read
		@read_exit[tid] = 1;
		@read_fd[tid] = \$fd;
		@read_count[pid, \$fd] = \$count;
	}

	tracepoint:syscalls:sys_exit_read
	/@read_exit[tid]/
	{
		\$fd = @read_fd[tid];
		\$count = @read_count[pid, \$fd];
		\$ret = args->ret;
		\$fstype = @trace[pid, \$fd];

		// Args from sys_enter_read
		delete(@read_exit[tid]);
		delete(@read_fd[tid]);
		delete(@read_count[pid, \$fd]);

		\$filtered = 0;

		// FILTERS
${FILTER_COMM:+"
		if (comm != $FILTER_COMM) { \$filtered = 1; }
"}
${FILTER_GROUP:+"
		if (gid != $FILTER_GID) { \$filtered = 1; }
"}
${FILTER_PID:+"
		if (pid != $FILTER_PID) { \$filtered = 1; }
"}
${FILTER_USER:+"
		if (uid != $FILTER_UID) { \$filtered = 1; }
"}

		if (\$ret > 0 && \$filtered == 0)
		{
			// VIEWS
${VIEW_COMM:+"
			@rd_comm[\$fstype, comm] = sum(\$count);
"}
${VIEW_GROUP:+"
			@rd_group[\$fstype, gid] = sum(\$count);
"}
${VIEW_PID:+"
			@rd_pid[\$fstype, pid] = sum(\$count);
"}
${VIEW_TYPE:+"
			@rd_type[\$fstype] = sum(\$count);
"}
${VIEW_USER:+"
			@rd_user[\$fstype, uid] = sum(\$count);
"}
		}
	}

	////////////////////////////////////////////////// WRITE PROBES

	/*
	 * write(2) probes
	 */

	tracepoint:syscalls:sys_enter_write
	/@trace[pid, args->fd] != ""/
	{
		\$fd = args->fd;
		\$count = args->count;

		// Pass args to sys_exit_write
		@write_exit[tid] = 1;
		@write_fd[tid] = \$fd;
		@write_count[pid, \$fd] = \$count;
	}

	tracepoint:syscalls:sys_exit_write
	/@write_exit[tid]/
	{
		\$fd = @write_fd[tid];
		\$count = @write_count[pid, \$fd];
		\$ret = args->ret;
		\$fstype = @trace[pid, \$fd];

		// Args from sys_enter_write
		delete(@write_exit[tid]);
		delete(@write_fd[tid]);
		delete(@write_count[pid, \$fd]);

		\$filtered = 0;

		// FILTERS
${FILTER_COMM:+"
		if (comm != $FILTER_COMM) { \$filtered = 1; }
"}
${FILTER_GROUP:+"
		if (gid != $FILTER_GID) { \$filtered = 1; }
"}
${FILTER_PID:+"
		if (pid != $FILTER_PID) { \$filtered = 1; }
"}
${FILTER_USER:+"
		if (uid != $FILTER_UID) { \$filtered = 1; }
"}

		if (\$ret > 0 && \$filtered == 0)
		{
			// VIEWS
${VIEW_COMM:+"
			@wr_comm[\$fstype, comm] = sum(\$count);
"}
${VIEW_GROUP:+"
			@wr_group[\$fstype, gid] = sum(\$count);
"}
${VIEW_PID:+"
			@wr_pid[\$fstype, pid] = sum(\$count);
"}
${VIEW_TYPE:+"
			@wr_type[\$fstype] = sum(\$count);
"}
${VIEW_USER:+"
			@wr_user[\$fstype, uid] = sum(\$count);
"}
		}
	}

	////////////////////////////////////////////////// INTERVAL PROBE

	$INTERVAL_PROBE
	{
		printf("===\n");

		// VIEWS
${VIEW_COMM:+
		print(@rd_comm);
		print(@wr_comm);
		clear(@rd_comm);
		clear(@wr_comm);
}
${VIEW_GROUP:+
		print(@rd_group);
		print(@wr_group);
		clear(@rd_group);
		clear(@wr_group);
}
${VIEW_PID:+
		print(@rd_pid);
		print(@wr_pid);
		clear(@rd_pid);
		clear(@wr_pid);
}
${VIEW_TYPE:+
		print(@rd_type);
		print(@wr_type);
		clear(@rd_type);
		clear(@wr_type);
}
${VIEW_USER:+
		print(@rd_user);
		print(@wr_user);
		clear(@rd_user);
		clear(@wr_user);
}

		printf("---\n");
	}

	////////////////////////////////////////////////// END

	END
	{
		// VIEWS
${VIEW_COMM:+
		clear(@rd_comm);
		clear(@wr_comm);
}
${VIEW_GROUP:+
		clear(@rd_group);
		clear(@wr_group);
}
${VIEW_TYPE:+
		clear(@rd_type);
		clear(@wr_type);
}
${VIEW_PID:+
		clear(@rd_pid);
		clear(@wr_pid);
}
${VIEW_USER:+
		clear(@rd_user);
		clear(@wr_user);
}

		clear(@dup_fd);
		clear(@read_count);
		clear(@read_exit);
		clear(@read_fd);
		clear(@trace);
$( for func in sys_enter_open sys_enter_openat; do
		name=${func#*enter_}
		awk 'sub(/^\\/,"")||1' <<-CLEAR
\		clear(@vfs_$name);
\		clear(@vfs_${name}_trace);
		CLEAR
done )
		clear(@write_count);
		clear(@write_exit);
		clear(@write_fd);
	}

	//////////////////////////////////////////////////////////////////////
	// END
	//////////////////////////////////////////////////////////////////////
EOF
	pid=$!
	prog_id=
	map_ids=

	#
	# Identify child bpftrace
	#
	if [ "$OPEN_FDS" -a ! "$DEBUG" ]; then
		info "Waiting for bpftrace to initialize..."
		while kill -0 $pid 2> /dev/null; do
			if [ ! "$prog_id" ]; then
				bpf_prog_id $pid BEGIN prog_id
				if [ "$prog_id" ]; then
					bpf_map_ids $prog_id map_ids
					[ "$map_ids" ] && break
				fi
			elif [ ! "$map_ids" ]; then
				bpf_map_ids $prog_id map_ids
				[ "$map_ids" ] && break
			fi
			sleep 1
		done
		if ! kill -0 $pid 2> /dev/null; then
			wait $pid > /dev/null 2>&1 # Collect exit status
			echo EXIT:$? # Send status to post-processor
			exit
		fi

		#
		# Store map ids
		#
		getword -w 1 -s MAP_ID_TRACE  -d , $map_ids
	fi

	#
	# Update open file descriptor map
	#
	if [ "$OPEN_FDS" -a "$MAP_ID_TRACE" ]; then
		echo "$OPEN_FDS" | awk -v map_id="$MAP_ID_TRACE" '
		######################################## BEGIN

		BEGIN {
			nopen = 0
			delete open_pid
			delete open_fd
			delete open_type

			str_max = ENVIRON["BPFTRACE_STRLEN"]
			if (str_max == "") str_max = 64

			delete asc
			for (n = 0; n <= 255; n++)
				asc[sprintf("%c", n)] = n
		}

		######################################## FUNCTIONS

		function num2bytes(num, size,        buf)
		{
			buf = ""
			sub(/B$/, "", size)
			while (size > 0) {
				buf = buf " " (num % 256)
				num = rshift(num, 8)
				size--
			}
			return substr(buf, 2)
		}

		function str2bytes(str,        buf, chars, nchars, char, n, p)
		{
			buf = ""
			p = str_max
			delete chars
			str = substr(str, 1, str_max)
			nchars = split(str, chars, "")
			for (n = 1; n <= nchars; n++) {
				char = chars[n]
				p--
				buf = buf " " asc[char]
			}
			while (p-- > 0)
				buf = buf " 0"
			return substr(buf, 2)
		}

		######################################## MAIN

		nitems = split($0, list) {
			for (n = 1; n <= nitems; n++) {
				pid_fd_type = list[n]
				if (pid_fd_type == "") continue
				nopen++
				split(pid_fd_type, open, /:/)
				open_pid[nopen] = open[1]
				open_fd[nopen] = open[2]
				open_type[nopen] = open[3]
			}
		}

		######################################## END

		END {
			for (n = 1; n <= nopen; n++) {
				pid = open_pid[n]
				fd = open_fd[n]
				type = open_type[n]

				key = sprintf("%s %s",
					num2bytes(pid, "8B"),
					num2bytes(fd, "8B"))
				value = str2bytes(type)

				printf "map update id %d key %s value %s\n",
					map_id, key, value
			}
		}

		' | bpftool batch file /dev/stdin > /dev/null
		count -s cnt $OPEN_FDS
		info "Loaded $cnt fds into bpftrace map" \
			"(pid $pid, prog $prog_id, map $MAP_ID_TRACE)"
	fi

	#
	# Bring bpftrace child back to the foreground
	#
	exec 9<&1 # Save a copy of stdout
	exec > /dev/null # make below fg silent (no effect on job stdout)
	fg %1
	wait $pid > /dev/null 2>&1 # Collect exit status
	echo EXIT:$? >&9 # Send status to post-processor

} | awk -v cols=$cols \
	-v debug=${DEBUG:-0} \
	-v debugger=${DEBUGGER:-0} \
	-v filter_type=${FILTER_TYPE:+1} \
	-v interval=$INTERVAL_SECONDS \
	-v no_names=${NO_NAMES:-0} \
	-v nsamples=${NSAMPLES:-0} \
	-v output_json=${OUTPUT_JSON:-0} \
	-v raw_view=${RAW_VIEW:-0} \
	-v rows=$rows \
	-v show_aggregates=${SHOW_AGGREGATES:-0} \
	-v view="$VIEW" \
	-v view_aggregates=${VIEW_AGGREGATES:-0} \
	-v wide_view=${WIDE_VIEW:-0} \
	'####################################### BEGIN

	BEGIN {
		debug2("Terminal size (rows, cols) = (%d, %d)", rows, cols)

		exit_status = 0 # SUCCESS

		samples_left = nsamples

		# Obtain awk pid
		(cmd = "echo $PPID") | getline apid
		close(cmd)

		# Obtain sh pid
		getline stat < (file = sprintf("/proc/%d/stat", apid))
		close(file)
		split(stat, st)
		spid = st[4]

		# Obtain child pid
		(cmd = sprintf("pgrep -P %d %s", spid, comm)) | getline cpid
		close(cmd)

		# Obtain bpftrace pid
		cmd = sprintf("pgrep -P %d bpftrace", cpid)
		cmd | getline bpid
		close(cmd)

		#
		# Calculate columns and column widths
		#
		# NB: vsz = size of VIEW column ("view size")
		# NB: bar_size = size of bar column (if shown)
		#
		# If given -w (wide view) make bar_size fixed-width and
		# vsz variable-width.
		#
		# Without -w, make vsz fixed-width and bar_size variable.
		#
		show_vfs_column = 1
		if (view == "TYPE" || filter_type || view_aggregates)
			show_vfs_column = 0
		vsz_fixed = 15 # VIEW column
		bar_size_fixed = cols <= 80 ? 11 : 21
		if (wide_view) {
			# Fixed-width
			bar_size = bar_size_fixed

			# Variable-width (%-*s)
			vsz = cols
			if (show_vfs_column) {
				vsz -= 8 + 1 # %-8s VFS + space
			}
			vsz -= 0 + 1 # %-*s VIEW + space
			vsz -= 12 + 1 # %12s TOTAL + space
			vsz -= 12 + 1 # %12s READ(IN) + space
			vsz -= bar_size + 1 # bar + space
			vsz -= 12 # %-12s WRITE(OUT)
		} else {
			# Fixed-width
			vsz = vsz_fixed

			# Variable-width (%-*s)
			bar_size = cols
			if (show_vfs_column) {
				bar_size -= 8 + 1 # %-8s VFS + space
			}
			bar_size -= vsz + 1 # %-15s VIEW + space
			bar_size -= 12 + 1 # %12s TOTAL + space
			bar_size -= 12 + 1 # %12s READ(IN) + space
			bar_size -= 0 + 1 # variable-width bar + space
			bar_size -= 12 # %-12s WRITE(OUT)
		}

		#
		# Calculate format and line width
		#
		fmt = ""
		fmtsz = 0
		if (show_vfs_column) {
			fmt = fmt " %-8s" # VFS column
			fmtsz += 1 + 8
		}
		fmt = fmt " %-" vsz "s" # VIEW column
		fmtsz += 1 + vsz
		fmt = fmt " %12s" # TOTAL column
		fmt = fmt " %12s" # READ(IN) column
		fmtsz += 1 + 12 + 1 + 12
		full_bar = bar_size
		bar_size = int(bar_size / 2)
		if (bar_size * 2 == full_bar) bar_size--
		fmt = fmt " %*s|%-*s"
		fmtsz += 1 + bar_size + 1 + bar_size
		fmt = fmt " %-12s" # WRITE(OUT) column
		fmtsz += 1 + 12
		fmt = substr(fmt, 2) "\n" # Trim leading space, append \n
		fmtsz -= 1

		if (!raw_view) {
			clear_buffer()
			buffer_add_header()
			if (!output_json) print_buffer()
		}

		# Declare arrays
		delete uid2name_cache
		delete gid2name_cache
	}

	######################################## FUNCTIONS

	function debug1(fmt,a1) { if (debugger) printf fmt "\n", a1 }
	function debug2(fmt,a1,a2) { if (debugger) printf fmt "\n", a1, a2 }
	function buffer_add(text) { BUFFER = BUFFER text }
	function print_buffer() { printf "%s", BUFFER }

	function uid2name(uid,        cmd, id, idf, name, n, k, idx, i, ret)
	{
		n = split(uid, k, /, /)
		uid = k[idx = 2]
		if (uid in uid2name_cache) {
			name = uid2name_cache[uid]
		} else {
			(cmd = sprintf("getent passwd %d", uid)) | getline id
			close(cmd)
			name = split(id, idf, /:/) < 3 ? uid : idf[1]
			if (name == "") name = uid
			uid2name_cache[uid] = name
		}
		if (!output_json && length(name) > vsz)
			name = substr(name, 1, vsz)
		ret = ""
		k[idx] = name
		for (i = 1; i <= n; i++)
			ret = ret ", " k[i]
		return substr(ret, 3) # Trim leading ", "
	}

	function gid2name(gid,        cmd, id, idf, name, n, k, idx, i, ret)
	{
		n = split(gid, k, /, /)
		gid = k[idx = 2]
		if (gid in gid2name_cache) {
			name = gid2name_cache[gid]
		} else {
			(cmd = sprintf("getent group %d", gid)) | getline id
			close(cmd)
			name = split(id, idf, /:/) < 3 ? gid : idf[1]
			if (name == "") name = gid
			gid2name_cache[gid] = name
		}
		if (!output_json && length(name) > vsz)
			name = substr(name, 1, vsz)
		ret = ""
		k[idx] = name
		for (i = 1; i <= n; i++)
			ret = ret ", " k[i]
		return substr(ret, 3) # Trim leading ", "
	}

	function clear_data()
	{
		# VIEWS
		delete comm_keys
		delete group_keys
		delete pid_keys
		delete type_keys
		delete user_keys

		nviews = 0
		delete map_views
		delete view_list

		delete map_key_read
		delete map_key_write
		delete map_view_read
		delete map_view_write
	}

	function clear_buffer()
	{
		clear_data()

		BUFFER = ""
		if (!output_json && !debugger)
			buffer_add(sprintf("\033[H\033[J"))
	}

	function buffer_add_header()
	{
		if (output_json) return
		buffer_add(sprintf("Interval: %-*s %31s\n",
			fmtsz - 9 - 2 - 31,
			sprintf("%.3f", interval) "s",
			strftime("%c", systime())))
				#  9 = "Interval:"
				#  2 = number of spaces
				# 31 = %31s date
		if (show_vfs_column) {
			buffer_add(sprintf("\033[7;1m" fmt "\033[27;22m",
				"VFS", view, "TOTAL", "READ(IN)", bar_size, "",
				bar_size, "", "WRITE(OUT)"))
		} else {
			buffer_add(sprintf("\033[7;1m" fmt "\033[27;22m",
				view == "TYPE" ? "VFS" : view, "TOTAL",
				"READ(IN)", bar_size, "", bar_size, "",
				"WRITE(OUT)"))
		}
	}

	function load_keys(map_view,        map_key)
	{
		delete _keys
		# VIEWS
		if (map_view == "comm") for (map_key in comm_keys)
			_keys[map_key] = comm_keys[map_key]
		else if (map_view == "group") for (map_key in group_keys)
			_keys[map_key] = group_keys[map_key]
		else if (map_view == "pid") for (map_key in pid_keys)
			_keys[map_key] = pid_keys[map_key]
		else if (map_view == "type") for (map_key in type_keys)
			_keys[map_key] = type_keys[map_key]
		else if (map_view == "user") for (map_key in user_keys)
			_keys[map_key] = user_keys[map_key]
	}

	function parse_map()
	{
		if (!match($0, /^@[^\[]*\[/)) return 0
		map_name = substr($0, RSTART + 1, RLENGTH - 2)
		map_view = substr(map_name, 4)
		map_op = substr(map_name, 1, 2) # rd/wr

		if (!match($0, /\[.*\]:/)) return 0
		map_key = substr($0, RSTART + 1, RLENGTH - 3)
		split(map_key, map_keys, /, /)
		map_value = $NF

		map_skey = ""
		if (show_aggregates) {
			map_key = sprintf("%s, %s",
				map_keys[1], map_keys[2])
			map_skey = sprintf("*, %s", map_keys[2])
		}

		if (!(map_view in map_views)) {
			map_views[map_view]
			view_list[++nviews] = map_view
		}

		# VIEWS
		if (map_view == "comm") {
			comm_keys[map_key]
			if (map_skey != "") comm_keys[map_skey]
		} else if (map_view == "group") {
			group_keys[map_key]
			if (map_skey != "") group_keys[map_skey]
		} else if (map_view == "pid") {
			pid_keys[map_key]
			if (map_skey != "") pid_keys[map_skey]
		} else if (map_view == "type") {
			type_keys[map_key]
			if (map_skey != "") type_keys[map_skey]
		} else if (map_view == "user") {
			user_keys[map_key]
			if (map_skey != "") user_keys[map_skey]
		}

		if (map_op == "rd") {
			map_view_read[map_view] += map_value
			map_key_read[map_view, map_key] = map_value
			if (map_skey != "")
				map_key_read[map_view, map_skey] += map_value
		} else { # wr
			map_view_write[map_view] += map_value
			map_key_write[map_view, map_key] = map_value
			if (map_skey != "")
				map_key_write[map_view, map_skey] += map_value
		}

		return 1
	}

	function humanize(value,        raw, n, suffix, suffixes)
	{
		raw = value
		n = split(",K,M,G,T,E", suffixes, /,/)
		for (suffix = 1; suffix <= n; suffix++) {
			if (int(value) < 1024) break
			value /= 1024
		}
		if (v ~ /\./) sub(/\.?0+$/, "", v)
		value = sprintf("%'"'"'.2f%sB/s", value, suffixes[suffix])
		return value
	}

	function _asort(src, dest,        k, nitems, i, val)
	{
		k = nitems = 0
		for (i in src) dest[++nitems] = src[i]
		for (i = 1; i <= nitems; k = i++) {
			val = dest[i]
			while ((k > 0) && (dest[k] > val)) {
				dest[k+1] = dest[k]; k--
			}
			dest[k+1] = val
		}
		return nitems
	}

	function json_add(json, key, format, value)
	{
		return json (length(json) < 2 ? "" : ",") \
			sprintf("\"%s\":" format, key, value)
	}

	function json_add_str(json, key, value)
	{
		return json_add(json, key, "\"%s\"", value)
	}

	function json_add_uint(json, key, value)
	{
		return json_add(json, key, "%u", value)
	}

	function json_add_prec(json, key, precision, value,        x)
	{
		x = sprintf("%.*f", precision, value)
		if (x ~ /\./) sub(/\.?0+$/, "", x)
		return json_add(json, key, "%s", x)
	}

	function json_add_float(json, key, value)
	{
		return json_add_prec(json, key, 12, value)
	}

	function sample_check()
	{
		if (nsamples > 0 && --samples_left < 1) {
			if (bpid == "") {
				cmd = sprintf("pgrep -P %d bpftrace", cpid)
				cmd | getline bpid
				close(cmd)
			}
			if (bpid != "") {
				system(sprintf("kill %d > /dev/null 2>&1",
					bpid))
			}
			exit
		}
	}

	function process_view(curview,
		read_bar, read_rate, read_total,
		write_bar, write_rate, write_total,
		_keys_sorted, cred, i, v, r, n, table_rows)
	{
		read_total = map_view_read[curview]
		read_rate = read_total / interval
		write_total = map_view_write[curview]
		write_rate = write_total / interval

		if (output_json) {
			json_out = ""
			json_out = json_add_uint(json_out, "time", tm)
			json_out = json_add_str(json_out,
				"ident", "total_" curview)
			json_out = json_add_uint(json_out,
				"total_bytes", read_total + write_total)
			json_out = json_add_float(json_out,
				"total_rate", read_rate + write_rate)
			json_out = json_add_uint(json_out,
				"read_bytes", read_total)
			json_out = json_add_float(json_out,
				"read_rate", read_rate)
			json_out = json_add_uint(json_out,
				"write_bytes", write_total)
			json_out = json_add_float(json_out,
				"write_rate", write_rate)
			buffer_add("{" json_out "}\n")
		} else {
			read_bar = ""
			write_bar = ""
			if (show_vfs_column) {
				buffer_add(sprintf(fmt, "*", "total",
					humanize(write_rate + read_rate),
					humanize(read_rate), bar_size,
					read_bar, bar_size, write_bar,
					humanize(write_rate)))
			} else {
				buffer_add(sprintf(fmt, "total",
					humanize(write_rate + read_rate),
					humanize(read_rate), bar_size,
					read_bar, bar_size, write_bar,
					humanize(write_rate)))
			}
		}

		#
		# Decorate combined read/write values
		#
		load_keys(curview)
		for (cred in _keys) {
			v = int(map_key_read[curview, cred]) + \
				int(map_key_write[curview, cred])
			if (cred ~ /^\*, /) v++ # Sort subtotals above
			_keys[cred] = sprintf("%99d %s", v, cred)
		}

		#
		# Print subtotals
		#
		r = 1
		n = _asort(_keys, _keys_sorted)
		table_rows = output_json ? n : rows - 4
		for (i = n; i >= 1 && r <= table_rows; i--) {
			debug2("r=[%d] table_rows=[%d]", r, table_rows)
			cred = _keys_sorted[i]
			sub(/^ *[^ ]+ +/, "", cred) # Undecorate
			r += process_cred(curview, cred,
				read_total, write_total)
		}
		if (i > 0) buffer_add(sprintf("(%d more) ... ", i))
	}

	function process_cred(curview, cred, read_total, write_total,
		cred_read, read_bar, read_bar_pct, read_rate,
		cred_write, write_bar, write_bar_pct, write_rate,
		_cred, key, pch)
	{
		pch = "="
		if (show_aggregates) {
			if (curview == "type") {
				if (cred != "*") {
					if (view_aggregates) return 0
				} else {
					if (output_json) return 0
				}
			} else {
				if (cred !~ /^\*, /) {
					if (view_aggregates) return 0
					pch = "-"
				}
			}
		}
		debug1("-> process_cred(curview = %s, ...)", curview)
		debug1("+ cred=[%s]", cred)

		cred_read = map_key_read[curview, cred]
		cred_write = map_key_write[curview, cred]

		read_rate = cred_read / interval
		if (read_total > 0)
			read_bar_pct = cred_read / read_total
		else
			read_bar_pct = 0
		read_bar_size = bar_size * read_bar_pct
		read_bar = sprintf("%*s", read_bar_size, "")
		gsub(/ /, pch, read_bar)
		sub(/^./, "<", read_bar)

		write_rate = cred_write / interval
		if (write_total > 0)
			write_bar_pct = cred_write / write_total
		else
			write_bar_pct = 0
		write_bar_size = bar_size * write_bar_pct
		write_bar = sprintf("%*s", write_bar_size, "")
		gsub(/ /, pch, write_bar)
		sub(/.$/, ">", write_bar)

		if (!no_names) {
			_cred = cred
			if (curview == "group") {
				cred = gid2name(cred)
			} else if (curview == "user") {
				cred = uid2name(cred)
			}
			if (cred != _cred) debug1("+ cred=[%s]", cred)
		}

		rw_rate = write_rate + read_rate
		if (output_json) {
			json_out = ""
			json_out = json_add_uint(json_out, "time", tm)
			json_out = json_add_str(json_out, "ident", curview)
			if (curview == "type") {
				json_out = json_add_str(json_out,
					curview, cred)
			} else {
				fstype = cred
				sub(/, .*/, "", fstype)
				sub(/^[^,]*, /, "", cred)
				json_out = json_add_str(json_out,
					curview, cred)
				json_out = json_add_str(json_out,
					"fstype", fstype)
			}
			json_out = json_add_uint(json_out,
				"total_bytes", cred_read + cred_write)
			json_out = json_add_float(json_out,
				"total_rate", rw_rate)
			json_out = json_add_uint(json_out,
				"read_bytes", cred_read)
			json_out = json_add_float(json_out,
				"read_rate", read_rate)
			json_out = json_add_uint(json_out,
				"write_bytes", cred_write)
			json_out = json_add_float(json_out,
				"write_rate", write_rate)
			buffer_add("{" json_out "}\n")
		} else {
			if (curview != "type") {
				fstype = cred
				sub(/, .*/, "", fstype)
				sub(/^[^,]*, /, "", cred)
			}
			if (show_vfs_column) {
				buffer_add(sprintf(fmt, fstype, cred,
					humanize(rw_rate), humanize(read_rate),
					bar_size, read_bar, bar_size,
					write_bar, humanize(write_rate)))
			} else {
				buffer_add(sprintf(fmt, cred,
					humanize(rw_rate), humanize(read_rate),
					bar_size, read_bar, bar_size,
					write_bar, humanize(write_rate)))
			}
		}

		return 1
	}

	######################################## MAIN

	sub(/^EXIT:/, "") { exit_status = $0; next }
	debug { sub(/^\t/, ""); print; next }

	raw_view {
		print

		# Exit if no more samples desired
		if (/^---$/) sample_check()

		if (!debugger) next
	}

	/^===$/ {
		read_total = write_total = 0
		clear_buffer()
		buffer_add_header()
		next
	}

	sub(/^info\|/, "") {
		if (!output_json) print
		next
	}

	/^@/ { parse_map() }

	/^---$/ {
		tm = systime()

		#
		# Process each requested view
		#
		for (v = 1; v <= nviews; v++)
			process_view(view_list[v])

		#
		# Dump information
		#
		print_buffer()
		clear_data()
		sample_check() # Exit if no more samples desired
	}

	################################################## END

	END { exit exit_status }
' # END-QUOTE

################################################################################
# END
################################################################################
# Local Variables:
# mode: sh
# tab-width: 8
# sh-basic-offset: 8
# indent-tabs-mode: t
# backward-delete-char-untabify-method: nil
# End:
